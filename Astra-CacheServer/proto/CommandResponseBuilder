// command_response_builder.hpp
#pragma once
#include "command_info.hpp"
#include "resp_builder.hpp"
#include <vector>

namespace Astra::proto {

    class CommandResponseBuilder {
    public:
        static std::string BuildCommandListResponse(const std::vector<CommandInfo> &commands, bool isForRedisCli = false);

    private:
        static std::string BuildFullCommandDetail(const CommandInfo &cmd);
    };


    inline std::string CommandResponseBuilder::BuildCommandListResponse(
            const std::vector<CommandInfo> &commands, bool isForRedisCli) {

        if (isForRedisCli) {
            std::vector<std::string> names;
            for (const auto &cmd: commands) {
                names.push_back(RespBuilder::BulkString(cmd.name));
            }
            return RespBuilder::Array(names);
        }

        std::vector<std::string> fullDetails;
        for (const auto &cmd: commands) {
            fullDetails.push_back(BuildFullCommandDetail(cmd));
        }
        return RespBuilder::Array(fullDetails);
    }

    inline std::string CommandResponseBuilder::BuildFullCommandDetail(const CommandInfo &cmd) {
        std::vector<std::string> fields;

        fields.push_back(RespBuilder::BulkString(cmd.name));// name
        fields.push_back(RespBuilder::Integer(cmd.arity));  // arity
        {
            std::vector<std::string> flagItems;
            for (const auto &flag: cmd.flags) {
                flagItems.push_back(RespBuilder::BulkString(flag));
            }
            fields.push_back(RespBuilder::Array(flagItems));// flags
        }
        fields.push_back(RespBuilder::Integer(cmd.first_key));   // first_key
        fields.push_back(RespBuilder::Integer(cmd.last_key));    // last_key
        fields.push_back(RespBuilder::Integer(cmd.key_step));    // key_step
        fields.push_back(RespBuilder::BulkString(""));           // tips
        fields.push_back(RespBuilder::Integer(cmd.microseconds));// microseconds
        {
            std::vector<std::string> categoryItems;
            categoryItems.push_back(RespBuilder::BulkString(cmd.category));
            fields.push_back(RespBuilder::Array(categoryItems));// category
        }

        return RespBuilder::Array(fields);
    }

}// namespace Astra::proto